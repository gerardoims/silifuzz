# Description:
#   XED, a software library for encoding and decoding x86 instructions (32- and
#   64-bit).
#
#   The decoder takes sequences of 1-15 bytes along with machine mode
#   information and produces a data structure describing the opcode and
#   operands, and flags. The encoder takes a similar data structure and produces
#   a sequence of 1 to 15 bytes. Disassembly is essentially a printing pass on
#   the data structure produced by the decoder.

package(
    default_visibility = ["//visibility:public"],
    features = [
        "-parse_headers",
    ],
)

licenses(["notice"])

exports_files(["LICENSE"])

# A subset of XED API public headers used by xed-ild-internal target.
COMMON_PUBLIC_HEADERS = [
    "gen/public-headers/xed-address-width-enum.h",
    "gen/public-headers/xed-agen.h",
    "gen/public-headers/xed-attribute-enum.h",
    "gen/public-headers/xed-attributes.h",
    "gen/public-headers/xed-build-defines.h",
    "gen/public-headers/xed-category-enum.h",
    "gen/public-headers/xed-chip-enum.h",
    "gen/public-headers/xed-chip-features.h",
    "gen/public-headers/xed-common-defs.h",
    "gen/public-headers/xed-common-hdrs.h",
    "gen/public-headers/xed-cpuid-group-enum.h",
    "gen/public-headers/xed-cpuid-rec-enum.h",
    "gen/public-headers/xed-cpuid-rec.h",
    "gen/public-headers/xed-decoded-inst-api.h",
    "gen/public-headers/xed-decoded-inst.h",
    "gen/public-headers/xed-decode.h",
    "gen/public-headers/xed-decoder-modes.h",
    "gen/public-headers/xed-disas.h",
    "gen/public-headers/xed-encode.h",
    "gen/public-headers/xed-encoder-gen-defs.h",
    "gen/public-headers/xed-encoder-hl.h",
    "gen/public-headers/xed-encoder-iforms.h",
    "gen/public-headers/xed-error-enum.h",
    "gen/public-headers/xed-exception-enum.h",
    "gen/public-headers/xed-extension-enum.h",
    "gen/public-headers/xed-flag-action-enum.h",
    "gen/public-headers/xed-flag-enum.h",
    "gen/public-headers/xed-flags.h",
    "gen/public-headers/xed-format-options.h",
    "gen/public-headers/xed-gen-table-defs.h",
    "gen/public-headers/xed-iclass-enum.h",
    "gen/public-headers/xed-iform-enum.h",
    "gen/public-headers/xed-iformfl-enum.h",
    "gen/public-headers/xed-iform-map.h",
    "gen/public-headers/xed-ild-enum.h",
    "gen/public-headers/xed-ild.h",
    "gen/public-headers/xed-init.h",
    "gen/public-headers/xed-inst.h",
    "gen/public-headers/xed-interface.h",
    "gen/public-headers/xed-isa-set-enum.h",
    "gen/public-headers/xed-isa-set.h",
    "gen/public-headers/xed-machine-mode-enum.h",
    "gen/public-headers/xed-nonterminal-enum.h",
    "gen/public-headers/xed-operand-accessors.h",
    "gen/public-headers/xed-operand-action-enum.h",
    "gen/public-headers/xed-operand-action.h",
    "gen/public-headers/xed-operand-convert-enum.h",
    "gen/public-headers/xed-operand-ctype-enum.h",
    "gen/public-headers/xed-operand-element-type-enum.h",
    "gen/public-headers/xed-operand-element-xtype-enum.h",
    "gen/public-headers/xed-operand-enum.h",
    "gen/public-headers/xed-operand-storage.h",
    "gen/public-headers/xed-operand-type-enum.h",
    "gen/public-headers/xed-operand-values-interface.h",
    "gen/public-headers/xed-operand-visibility-enum.h",
    "gen/public-headers/xed-operand-width-enum.h",
    "gen/public-headers/xed-patch.h",
    "gen/public-headers/xed-portability.h",
    "gen/public-headers/xed-print-info.h",
    "gen/public-headers/xed-reg-class-enum.h",
    "gen/public-headers/xed-reg-class.h",
    "gen/public-headers/xed-reg-enum.h",
    "gen/public-headers/xed-rep-prefix.h",
    "gen/public-headers/xed-state.h",
    "gen/public-headers/xed-syntax-enum.h",
    "gen/public-headers/xed-types.h",
    "gen/public-headers/xed-util.h",
    "gen/public-headers/xed-version.h",
]

# A list of all XED API headers.
PUBLIC_HEADERS = COMMON_PUBLIC_HEADERS + [
    "gen/public-headers/xed-convert-table-init.h",
    "gen/public-headers/xed-encode-check.h",
    "gen/public-headers/xed-encode-direct.h",
    "gen/public-headers/xed-get-time.h",
    "gen/public-headers/xed-immdis.h",
    "gen/public-headers/xed-immed.h",
    "gen/public-headers/xed-init-pointer-names.h",
    "gen/public-headers/xed-mapu-enum.h",
    "gen/public-headers/xed-operand-ctype-map.h",
    "gen/public-headers/xed-reg-role-enum.h",
]

# Main target to depend on.
cc_library(
    name = "xed",
    hdrs = PUBLIC_HEADERS,
    strip_include_prefix = "gen/public-headers",
    include_prefix = "third_party/libxed",
    deps = [":xed-internal"],
)

cc_library(
    name = "xed-public-headers",
    hdrs = PUBLIC_HEADERS,
    strip_include_prefix = "gen/public-headers",
    visibility = ["//visibility:private"],
)

cc_library(
    name = "xed-static-private-headers",
    hdrs = glob(
        ["include/private/*.h"],
        exclude = ["include/private/xed-decode-profile.h"],
    ),
    strip_include_prefix = "include/private",
    visibility = ["//visibility:private"],
)

GENERATED_ENCODER_PRIVATE_HEADERS = [
    "gen/sources/include-private/xed-enc-groups.h",
    "gen/sources/include-private/xed-encoder.h",
    "gen/sources/include-private/xed-enc-operand-lu.h",
    "gen/sources/include-private/xed-enc-patterns.h",
]

GENERATED_ENCODER_SOURCE = [
    "gen/sources/xed-enc-groups.c",
    "gen/sources/xed-encoder-0.c",
    "gen/sources/xed-encoder-1.c",
    "gen/sources/xed-encoder-2.c",
    "gen/sources/xed-encoder-3.c",
    "gen/sources/xed-encoder-4.c",
    "gen/sources/xed-encoder-5.c",
    "gen/sources/xed-encoder-6.c",
    "gen/sources/xed-encoder-7.c",
    "gen/sources/xed-encoder-iforms-init.c",
    "gen/sources/xed-encoder-init.c",
    "gen/sources/xed-encoder-order-init.c",
    "gen/sources/xed-encoder-pattern-lu.c",
    "gen/sources/xed-enc-operand-lu.c",
    "gen/sources/xed-enc-patterns.c",
]

GENERATED_ENCODER_HEADERS = [
    "gen/sources/xed-encoder-gen-defs.h",
    "gen/sources/xed-encoder-iforms.h",
]

GENERATED_DECODER_PRIVATE_HEADERS = [
    "gen/sources/include-private/xed3-chain-capture.h",
    "gen/sources/include-private/xed3-chain-capture-lu.h",
    "gen/sources/include-private/xed3-dynamic-part1-capture.h",
    "gen/sources/include-private/xed3-nt-capture.h",
    "gen/sources/include-private/xed3-op-chain-capture.h",
    "gen/sources/include-private/xed3-op-chain-capture-lu.h",
    "gen/sources/include-private/xed3-operand-lu.h",
    "gen/sources/include-private/xed3-phash.h",
    "gen/sources/include-private/xed3-phash-lu-vv0.h",
    "gen/sources/include-private/xed3-phash-lu-vv1.h",
    "gen/sources/include-private/xed3-phash-lu-vv2.h",
    "gen/sources/include-private/xed3-phash-lu-vv3.h",
    "gen/sources/include-private/xed3-phash-vv0.h",
    "gen/sources/include-private/xed3-phash-vv1.h",
    "gen/sources/include-private/xed3-phash-vv2.h",
    "gen/sources/include-private/xed3-phash-vv3.h",
    "gen/sources/include-private/xed-chip-features-table.h",
    "gen/sources/include-private/xed-ild-disp-bytes.h",
    "gen/sources/include-private/xed-ild-disp-l1.h",
    "gen/sources/include-private/xed-ild-disp-l2.h",
    "gen/sources/include-private/xed-ild-disp-l3.h",
    "gen/sources/include-private/xed-ild-easz-getters.h",
    "gen/sources/include-private/xed-ild-easz.h",
    "gen/sources/include-private/xed-ild-eosz-getters.h",
    "gen/sources/include-private/xed-ild-eosz.h",
    "gen/sources/include-private/xed-ild-imm-bytes.h",
    "gen/sources/include-private/xed-ild-imm-l1.h",
    "gen/sources/include-private/xed-ild-imm-l2.h",
    "gen/sources/include-private/xed-ild-imm-l3.h",
    "gen/sources/include-private/xed-ild-modrm.h",
    "gen/sources/include-private/xed-map-feature-tables.h",
]

GENERATED_DECODER_SOURCE = [
    "gen/sources/xed3-operand-lu.c",
    "gen/sources/xed3-phash-lu-vv0.c",
    "gen/sources/xed3-phash-lu-vv1.c",
    "gen/sources/xed3-phash-lu-vv2.c",
    "gen/sources/xed3-phash-lu-vv3.c",
    "gen/sources/xed-address-width-enum.c",
    "gen/sources/xed-attribute-enum.c",
    "gen/sources/xed-attributes-init.c",
    "gen/sources/xed-attributes-list.c",
    "gen/sources/xed-category-enum.c",
    "gen/sources/xed-chip-enum.c",
    "gen/sources/xed-chip-features-table.c",
    "gen/sources/xed-classifiers.c",
    "gen/sources/xed-convert-table-init.c",
    "gen/sources/xed-cpuid-group-enum.c",
    "gen/sources/xed-cpuid-rec-enum.c",
    "gen/sources/xed-cpuid-tables.c",
    "gen/sources/xed-error-enum.c",
    "gen/sources/xed-exception-enum.c",
    "gen/sources/xed-extension-enum.c",
    "gen/sources/xed-flag-action-enum.c",
    "gen/sources/xed-flag-enum.c",
    "gen/sources/xed-flags-actions.c",
    "gen/sources/xed-flags-complex.c",
    "gen/sources/xed-flags-simple.c",
    "gen/sources/xed-iclass-enum.c",
    "gen/sources/xed-iclass-string.c",
    "gen/sources/xed-iform-enum.c",
    "gen/sources/xed-iformfl-enum.c",
    "gen/sources/xed-iform-map-init.c",
    "gen/sources/xed-iform-max.c",
    "gen/sources/xed-ild-disp-l3.c",
    "gen/sources/xed-ild-easz.c",
    "gen/sources/xed-ild-enum.c",
    "gen/sources/xed-ild-eosz.c",
    "gen/sources/xed-ild-imm-l3.c",
    "gen/sources/xed-init-inst-table-0.c",
    "gen/sources/xed-init-inst-table.c",
    "gen/sources/xed-init-inst-table-data.c",
    "gen/sources/xed-init-operand-data.c",
    "gen/sources/xed-init-operand-sequences.c",
    "gen/sources/xed-init-operand-type-mappings.c",
    "gen/sources/xed-init-pointer-names.c",
    "gen/sources/xed-init-reg-class.c",
    "gen/sources/xed-init-width.c",
    "gen/sources/xed-isa-set-enum.c",
    "gen/sources/xed-machine-mode-enum.c",
    "gen/sources/xed-mapu-enum.c",
    "gen/sources/xed-nonterminal-enum.c",
    "gen/sources/xed-operand-accessors.c",
    "gen/sources/xed-operand-action-enum.c",
    "gen/sources/xed-operand-convert-enum.c",
    "gen/sources/xed-operand-convert-init.c",
    "gen/sources/xed-operand-ctype-enum.c",
    "gen/sources/xed-operand-ctype-map.c",
    "gen/sources/xed-operand-element-type-enum.c",
    "gen/sources/xed-operand-element-xtype-enum.c",
    "gen/sources/xed-operand-enum.c",
    "gen/sources/xed-operand-type-enum.c",
    "gen/sources/xed-operand-visibility-enum.c",
    "gen/sources/xed-operand-width-enum.c",
    "gen/sources/xed-reg-class-enum.c",
    "gen/sources/xed-reg-enum.c",
    "gen/sources/xed-reg-role-enum.c",
    "gen/sources/xed-rep-map.c",
    "gen/sources/xed-syntax-enum.c",
]

GENERATED_DECODER_HEADERS = [
    "gen/sources/xed-address-width-enum.h",
    "gen/sources/xed-attribute-enum.h",
    "gen/sources/xed-category-enum.h",
    "gen/sources/xed-chip-enum.h",
    "gen/sources/xed-convert-table-init.h",
    "gen/sources/xed-cpuid-group-enum.h",
    "gen/sources/xed-cpuid-rec-enum.h",
    "gen/sources/xed-error-enum.h",
    "gen/sources/xed-exception-enum.h",
    "gen/sources/xed-extension-enum.h",
    "gen/sources/xed-flag-action-enum.h",
    "gen/sources/xed-flag-enum.h",
    "gen/sources/xed-gen-table-defs.h",
    "gen/sources/xed-iclass-enum.h",
    "gen/sources/xed-iform-enum.h",
    "gen/sources/xed-iformfl-enum.h",
    "gen/sources/xed-ild-enum.h",
    "gen/sources/xed-init-pointer-names.h",
    "gen/sources/xed-isa-set-enum.h",
    "gen/sources/xed-machine-mode-enum.h",
    "gen/sources/xed-mapu-enum.h",
    "gen/sources/xed-nonterminal-enum.h",
    "gen/sources/xed-operand-accessors.h",
    "gen/sources/xed-operand-action-enum.h",
    "gen/sources/xed-operand-convert-enum.h",
    "gen/sources/xed-operand-ctype-enum.h",
    "gen/sources/xed-operand-ctype-map.h",
    "gen/sources/xed-operand-element-type-enum.h",
    "gen/sources/xed-operand-element-xtype-enum.h",
    "gen/sources/xed-operand-enum.h",
    "gen/sources/xed-operand-storage.h",
    "gen/sources/xed-operand-type-enum.h",
    "gen/sources/xed-operand-visibility-enum.h",
    "gen/sources/xed-operand-width-enum.h",
    "gen/sources/xed-reg-class-enum.h",
    "gen/sources/xed-reg-enum.h",
    "gen/sources/xed-reg-role-enum.h",
    "gen/sources/xed-syntax-enum.h",
]

XED_SOURCE = glob(
    [
        "src/common/*.c",
        "src/dec/*.c",
        "src/enc/*.c",
    ],
    exclude = [
        "src/common/xed-operand-values-interface-repl.c",
    ],
) + [
    "datafiles/avx512f/xed-operand-values-interface-uisa.c",
    "src/encdec/xed-enc-dec.c",
]

XED_COPTS = [
    "-DXED_AMD_ENABLED",
    "-DXED_AVX",
    "-DXED_CET",
    "-DXED_DLL",
    "-DXED_DECODER",
    "-DXED_ENCODER",
    "-DXED_MPX",
    "-DXED_SUPPORTS_AVX512",
    "-DXED_SUPPORTS_LZCNT_TZCNT",
    "-DXED_SUPPORTS_SHA",
    "-DXED_SUPPORTS_WBNOINVD",
    "-DXED_VERSION='v2023.08.21'",
    "-DXED_VIA_ENABLED",
    "-fvisibility=hidden",
    "-std=c99",
]

cc_library(
    name = "xed-generated-private-headers",
    hdrs = GENERATED_ENCODER_PRIVATE_HEADERS + GENERATED_DECODER_PRIVATE_HEADERS,
    strip_include_prefix = "gen/sources/include-private",
    visibility = ["//visibility:private"],
)

# Primary XED library.
cc_library(
    name = "xed-internal",
    srcs = GENERATED_ENCODER_SOURCE + GENERATED_DECODER_SOURCE + XED_SOURCE,
    hdrs = PUBLIC_HEADERS,
    copts = XED_COPTS,
    visibility = ["//visibility:private"],
    deps = [
        ":xed-generated-private-headers",
        ":xed-public-headers",
        ":xed-static-private-headers",
    ],
)

# Copy both the pre-existing and generated header API files to a common
# location. This makes it easy to refer to them and allows for trivial
# packaging.
genrule(
    name = "gen-public-headers",
    srcs = [
        "xed-build-defines.h",
        "gen/sources/xed-address-width-enum.h",
        "gen/sources/xed-attribute-enum.h",
        "gen/sources/xed-category-enum.h",
        "gen/sources/xed-chip-enum.h",
        "gen/sources/xed-convert-table-init.h",
        "gen/sources/xed-cpuid-group-enum.h",
        "gen/sources/xed-cpuid-rec-enum.h",
        "gen/sources/xed-encoder-gen-defs.h",
        "gen/sources/xed-encoder-iforms.h",
        "gen/sources/xed-error-enum.h",
        "gen/sources/xed-exception-enum.h",
        "gen/sources/xed-extension-enum.h",
        "gen/sources/xed-flag-action-enum.h",
        "gen/sources/xed-flag-enum.h",
        "gen/sources/xed-gen-table-defs.h",
        "gen/sources/xed-iclass-enum.h",
        "gen/sources/xed-iform-enum.h",
        "gen/sources/xed-iformfl-enum.h",
        "gen/sources/xed-ild-enum.h",
        "gen/sources/xed-init-pointer-names.h",
        "gen/sources/xed-isa-set-enum.h",
        "gen/sources/xed-machine-mode-enum.h",
        "gen/sources/xed-mapu-enum.h",
        "gen/sources/xed-nonterminal-enum.h",
        "gen/sources/xed-operand-accessors.h",
        "gen/sources/xed-operand-action-enum.h",
        "gen/sources/xed-operand-convert-enum.h",
        "gen/sources/xed-operand-ctype-enum.h",
        "gen/sources/xed-operand-ctype-map.h",
        "gen/sources/xed-operand-element-type-enum.h",
        "gen/sources/xed-operand-element-xtype-enum.h",
        "gen/sources/xed-operand-enum.h",
        "gen/sources/xed-operand-storage.h",
        "gen/sources/xed-operand-type-enum.h",
        "gen/sources/xed-operand-visibility-enum.h",
        "gen/sources/xed-operand-width-enum.h",
        "gen/sources/xed-reg-class-enum.h",
        "gen/sources/xed-reg-enum.h",
        "gen/sources/xed-reg-role-enum.h",
        "gen/sources/xed-syntax-enum.h",
        "include/public/xed/xed-agen.h",
        "include/public/xed/xed-attributes.h",
        "include/public/xed/xed-chip-features.h",
        "include/public/xed/xed-common-defs.h",
        "include/public/xed/xed-common-hdrs.h",
        "include/public/xed/xed-cpuid-rec.h",
        "include/public/xed/xed-decoded-inst-api.h",
        "include/public/xed/xed-decoded-inst.h",
        "include/public/xed/xed-decode.h",
        "include/public/xed/xed-decoder-modes.h",
        "include/public/xed/xed-disas.h",
        "include/public/xed/xed-encode-check.h",
        "include/public/xed/xed-encode-direct.h",
        "include/public/xed/xed-encode.h",
        "include/public/xed/xed-encoder-hl.h",
        "include/public/xed/xed-flags.h",
        "include/public/xed/xed-format-options.h",
        "include/public/xed/xed-get-time.h",
        "include/public/xed/xed-iform-map.h",
        "include/public/xed/xed-ild.h",
        "include/public/xed/xed-immdis.h",
        "include/public/xed/xed-immed.h",
        "include/public/xed/xed-init.h",
        "include/public/xed/xed-inst.h",
        "include/public/xed/xed-interface.h",
        "include/public/xed/xed-isa-set.h",
        "include/public/xed/xed-operand-action.h",
        "include/public/xed/xed-operand-values-interface.h",
        "include/public/xed/xed-patch.h",
        "include/public/xed/xed-portability.h",
        "include/public/xed/xed-print-info.h",
        "include/public/xed/xed-reg-class.h",
        "include/public/xed/xed-rep-prefix.h",
        "include/public/xed/xed-state.h",
        "include/public/xed/xed-types.h",
        "include/public/xed/xed-util.h",
        "include/public/xed/xed-version.h",
    ],
    outs = PUBLIC_HEADERS,
    cmd = "cp $(SRCS) $(@D)/gen/public-headers",
)

py_library(
    name = "xed_pysrc",
    srcs = glob(
        include = ["pysrc/*.py"],
        exclude = [
            "pysrc/read-encfile.py",
            "pysrc/generator.py",
        ],
    ),
    deps = ["@mbuild//:mbuild"],
)

py_binary(
    name = "read-encfile",
    srcs = ["pysrc/read-encfile.py"],
    main = "pysrc/read-encfile.py",
    python_version = "PY3",
    deps = [":xed_pysrc"],
)

py_binary(
    name = "generator",
    srcs = ["pysrc/generator.py"],
    main = "pysrc/generator.py",
    python_version = "PY3",
    deps = [":xed_pysrc"],
)

py_library(
    name = "xed_mbuild",
    srcs = ["xed_mbuild.py"],
    data = [
        # XED reads this file to define a version macro.
        "VERSION",
    ],
    deps = [
        ":xed_build_common",
        "@mbuild//:mbuild",
    ],
)

py_library(
    name = "xed_build_common",
    srcs = ["xed_build_common.py"],
    deps = ["@mbuild//:mbuild"],
)

py_binary(
    name = "xed_mfile",
    srcs = ["mfile.py"],
    main = "mfile.py",
    python_version = "PY3",
    deps = [
        ":xed_build_common",
        ":xed_mbuild",
        ":xed_pysrc",
        "@mbuild//:mbuild",
    ],
)

# Use mfile in "just-prep" mode to generate combined input files for the encoder
# and decoder generators.
genrule(
    name = "gen_combined_input_files",
    srcs = glob(["datafiles/**"]) + ["VERSION"],
    outs = [
        "xed-build-defines.h",
        "dgen/all-chip-models.txt",
        "dgen/all-conversion-table.txt",
        "dgen/all-cpuid.txt",
        "dgen/all-dec-instructions.txt",
        "dgen/all-dec-patterns.txt",
        "dgen/all-dec-spine.txt",
        "dgen/all-element-type-base.txt",
        "dgen/all-element-types.txt",
        "dgen/all-enc2-instructions.txt",
        "dgen/all-enc-dec-patterns.txt",
        "dgen/all-enc-instructions.txt",
        "dgen/all-enc-patterns.txt",
        "dgen/all-errors.txt",
        "dgen/all-extra-widths.txt",
        "dgen/all-fields.txt",
        "dgen/all-map-descriptions.txt",
        "dgen/all-pointer-names.txt",
        "dgen/all-registers.txt",
        "dgen/all-state.txt",
        "dgen/all-widths.txt",
    ],
    cmd = "$(location :xed_mfile) " +
          "--build-dir $(@D) " +
          "--src-dir $$(dirname $(location :VERSION)) " +
          "just-prep",
    tools = [
        ":xed_mfile",
    ],
)

# Generator flags used for both encoder and decoder generation.
GENERATOR_COMMON_FLAGS = (
    "--chip-models $(location dgen/all-chip-models.txt) " +
    "--input-fields $(location dgen/all-fields.txt) " +
    "--input-state $(location dgen/all-state.txt) " +
    "--input-regs $(location dgen/all-registers.txt) " +
    "--map-descriptions $(location dgen/all-map-descriptions.txt) " +
    "--gendir $(@D)/gen/sources " +
    "--xeddir $$(dirname $$(dirname $(location misc/legal-header.txt))) "
)

# Use the XED internal tools to generate encoder-related source files.
genrule(
    name = "gen-xed-enc-generator",
    srcs = [
        "dgen/all-chip-models.txt",
        "dgen/all-enc-dec-patterns.txt",
        "dgen/all-enc-instructions.txt",
        "dgen/all-enc-patterns.txt",
        "dgen/all-fields.txt",
        "dgen/all-map-descriptions.txt",
        "dgen/all-registers.txt",
        "dgen/all-state.txt",
        "misc/legal-header.txt",
    ],
    outs = GENERATED_ENCODER_PRIVATE_HEADERS + GENERATED_ENCODER_SOURCE + GENERATED_ENCODER_HEADERS + [
        "gen/sources/gen-xed-enc-generator.log",
    ],
    cmd = "$(location :read-encfile) " +
          GENERATOR_COMMON_FLAGS +
          "--isa $(location dgen/all-enc-instructions.txt) " +
          "--enc-patterns $(location dgen/all-enc-patterns.txt) " +
          "--enc-dec-patterns $(location dgen/all-enc-dec-patterns.txt) " +
          "--chip ALL " +
          "2>&1 > $(location gen/sources/gen-xed-enc-generator.log)",
    tools = [":read-encfile"],
)

# Use the XED internal tools to generate decoder-related source files.
genrule(
    name = "gen-xed-dec-generator",
    srcs = glob([
        "datafiles/*enum.txt",
        "include/private/*.h",
    ]) + [
        "dgen/all-chip-models.txt",
        "dgen/all-conversion-table.txt",
        "dgen/all-cpuid.txt",
        "dgen/all-dec-spine.txt",
        "dgen/all-dec-instructions.txt",
        "dgen/all-dec-patterns.txt",
        "dgen/all-element-types.txt",
        "dgen/all-element-type-base.txt",
        "dgen/all-errors.txt",
        "dgen/all-extra-widths.txt",
        "dgen/all-fields.txt",
        "dgen/all-map-descriptions.txt",
        "dgen/all-pointer-names.txt",
        "dgen/all-registers.txt",
        "dgen/all-state.txt",
        "dgen/all-widths.txt",
        "misc/legal-header.txt",
    ],
    outs = GENERATED_DECODER_PRIVATE_HEADERS + GENERATED_DECODER_SOURCE + GENERATED_DECODER_HEADERS + [
        "gen/sources/gen-xed-dec-generator.log",
        "gen/sources/cdata.txt",
        "gen/sources/idata.txt",
        "gen/sources/ild_easz_debug_header.txt",
        "gen/sources/ild_easz_debug.txt",
        "gen/sources/ild_eosz_debug_header.txt",
        "gen/sources/ild_eosz_debug.txt",
        "gen/sources/xed-attribute-enum.txt",
        "gen/sources/xed-category-enum.txt",
        "gen/sources/xed-chip-enum.txt",
        "gen/sources/xed-cpuid-group-enum.txt",
        "gen/sources/xed-cpuid-rec-enum.txt",
        "gen/sources/xed-exception-enum.txt",
        "gen/sources/xed-extension-enum.txt",
        "gen/sources/xed-iclass-enum.txt",
        "gen/sources/xed-iform-enum.txt",
        "gen/sources/xed-iformfl-enum.txt",
        "gen/sources/xed-isa-set-enum.txt",
        "gen/sources/xed-nonterminal-enum.txt",
        "gen/sources/xed-operand-convert-enum.txt",
        "gen/sources/xed-operand-ctype-enum.txt",
        "gen/sources/xed-operand-element-xtype-enum.txt",
        "gen/sources/xed-operand-enum.txt",
        "gen/sources/xed-operand-type-enum.txt",
        "gen/sources/xed-operand-width-enum.txt",
        "gen/sources/xed-reg-class-enum.txt",
        "gen/sources/xed-reg-enum.txt",
    ],
    cmd = "$(location :generator) " +
          GENERATOR_COMMON_FLAGS +
          "--spine $(location dgen/all-dec-spine.txt) " +
          "--isa $(location dgen/all-dec-instructions.txt) " +
          "--patterns $(location dgen/all-dec-patterns.txt) " +
          "--ctables $(location dgen/all-conversion-table.txt) " +
          "--input-widths $(location dgen/all-widths.txt) " +
          "--input-extra-widths $(location dgen/all-extra-widths.txt) " +
          "--input-element-types $(location dgen/all-element-types.txt) " +
          "--input-element-type-base $(location dgen/all-element-type-base.txt) " +
          "--input-pointer-names $(location dgen/all-pointer-names.txt) " +
          "--cpuid $(location dgen/all-cpuid.txt) " +
          "--input-errors $(location dgen/all-errors.txt) " +
          "2>&1 > $(location gen/sources/gen-xed-dec-generator.log)",
    tools = [":generator"],
)

# A mininalistic test program to verify build sanity.
cc_binary(
    name = "xed-tester",
    srcs = ["examples/xed-tester.c"],
    deps = [
      ":xed-internal",
      ":xed-public-headers",
      ":xed-generated-private-headers",
    ],
)
